---

- name: Create a Hortonworks Ambari deployment
  hosts: localhost
  vars_files:
    - vars.yaml
  tasks:
  - name: Create volumes
    os_volume:
      auth:
        auth_url: "{{ lookup('env', 'OS_AUTH_URL') }}"
        username: "{{ lookup('env', 'OS_USERNAME') }}"
        password: "{{ lookup('env', 'OS_PASSWORD') }}"
        project_name: "{{ lookup('env', 'OS_TENANT_NAME') }}"
      display_name: "{{ item }}"
      size: "{{ volsize }}"
    with_items:
      - "ambari1-vol"
      - "ambari2-vol"
      - "ambari3-vol"
      - "ambari4-vol"
      - "ambari5-vol"
      - "ambari6-vol"
      - "ambari7-vol"
      - "ambari8-vol"
  - name: test for presence of local keypair
    stat: path="id_rsa_ambari"
    register: testenv_keypair_local
  
  - name: delete remote keypair
    os_keypair:
      name: "ambarikey"
      state: absent
    when: not testenv_keypair_local.stat.exists
  
  - name: create the keypair
    os_keypair:
      name: "ambarikey"
      state: present
    register: testenv_keypair
  
  - name: persist the keypair
    copy:
      dest: "./id_rsa_ambari"
      content: "{{ testenv_keypair.key.private_key }}"
      mode: 0600
    when: testenv_keypair.changed

  - name: launch an instance
    os_server:
      name: "{{ item }}"
      state: present
      auth:
        auth_url: "{{ lookup('env', 'OS_AUTH_URL') }}"
        username: "{{ lookup('env', 'OS_USERNAME') }}"
        password: "{{ lookup('env', 'OS_PASSWORD') }}"
        project_name: "{{ lookup('env', 'OS_TENANT_NAME') }}"
      image: "{{image}}"
      security_groups: "{{secgroups}}"
      flavor: "{{flavor}}"
      #key_name: "{{key_name}}"
      key_name: "ambarikey"
      nics:
        - net-name: "{{net_name}}"
      volumes:
        - "{{item}}-vol"
      wait: yes
    register: osinstance
    with_items:
      - "ambari1"
      - "ambari2"
      - "ambari3"
      - "ambari4"
      - "ambari5"
      - "ambari6"
      - "ambari7"
      - "ambari8"

  - name: Wait 15 seconds
    pause: seconds=15
    when: osinstance.changed
  
  - name: Add new VM to ansible inventory
    add_host:
      name: "{{ item.server.name}}"
      ansible_host: "{{item.server.public_v4}}"
      ansible_user: "{{ansible_user}}"
      ansible_ssh_common_args: -i ./id_rsa_ambari -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no
      volume_device: "{{item.server.volumes[0].device}}"
    with_items: "{{ osinstance.results }}"

- name: Configure all hosts
  become: true
  hosts:
    - "ambari1"
    - "ambari2"
    - "ambari3"
    - "ambari4"
    - "ambari5"
    - "ambari6"
    - "ambari7"
    - "ambari8"
  tasks:
  - name: Add Ambari Repo Key
    apt_key: keyserver=keyserver.ubuntu.com id=B9733A7A07513CAD
  - name: "Build hosts file"
    lineinfile: dest=/etc/hosts regexp='.*{{ item }}$' line="{{ hostvars[item].ansible_default_ipv4.address }} {{item}}" state=present
    when: hostvars[item].ansible_default_ipv4.address is defined
    with_items:
      - "ambari1"
      - "ambari2"
      - "ambari3"
      - "ambari4"
      - "ambari5"
      - "ambari6"
      - "ambari7"
      - "ambari8"
  - name: Check if hadoop folder exists
    stat: path=/hadoop
    register: hadoop_folder
  - name: Format volume
    filesystem: fstype=ext4 dev=/dev/vdb
    when: hadoop_folder.stat.exists == False
  - name: Create /hadoop folder
    file: path=/hadoop state=directory
    when: hadoop_folder.stat.exists == False
  - name: Manage fstab
    mount: name=/hadoop src=/dev/vdb opts=nobootwait fstype=ext4 state=mounted
    when: hadoop_folder.stat.exists == False
  - name: copy cheatsheet file
    copy: src=docs/cheatsheet.txt dest=/home/ubuntu/cheatsheet.txt owner=ubuntu

- name: Install the ambari server on ambari1
  become: true
  hosts:
    - "ambari1"
  tasks:
  - name: Add Ambari Repo
    apt_repository: repo='deb http://public-repo-1.hortonworks.com/ambari/ubuntu14/2.x/updates/2.2.2.0 Ambari     main' state=present filename='ambari'
  - name: upgrade all packages
    apt: upgrade=dist update_cache=yes
  - name: Check if Ambari is already installed
    stat: path=/var/run/ambari-server/
    register: ambari_is_installed
  - name: install ambari server
    apt: name=ambari-server
    when: ambari_is_installed.stat.exists == False
  - name: server setup
    command: ambari-server setup -s
    when: ambari_is_installed.stat.exists == False
  - name: server start
    command: ambari-server start
    when: ambari_is_installed.stat.exists == False

